# Generated by Django 5.2 on 2025-07-14 16:55

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SkillCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom de la Catégorie')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de Création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de Dernière Mise à Jour')),
            ],
            options={
                'verbose_name': 'Catégorie de Compétence',
                'verbose_name_plural': 'Catégories de Compétences',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Nom de la Compétence')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_critical_for_snel', models.BooleanField(default=False, help_text='Indique si cette compétence est essentielle pour les opérations ou la stratégie de la SNEL.', verbose_name='Critique pour la SNEL')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de Création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de Dernière Mise à Jour')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='skills', to='skill_training.skillcategory', verbose_name='Catégorie')),
            ],
            options={
                'verbose_name': 'Compétence',
                'verbose_name_plural': 'Compétences',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SkillGapAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_date', models.DateTimeField(auto_now_add=True, verbose_name="Date de l'Analyse")),
                ('recommendation_reason', models.TextField(verbose_name='Raison de la Recommandation (IA)')),
                ('is_actioned', models.BooleanField(default=False, verbose_name="Action Prise Suite à l'Analyse")),
                ('action_description', models.TextField(blank=True, null=True, verbose_name="Description de l'Action Prise")),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_gap_analyses', to=settings.AUTH_USER_MODEL, verbose_name='Employé')),
                ('identified_gaps', models.ManyToManyField(related_name='gaps_identified_in_analysis', to='skill_training.skill', verbose_name='Lacunes Identifiées')),
            ],
            options={
                'verbose_name': 'Analyse des Lacunes en Compétences (IA)',
                'verbose_name_plural': 'Analyses des Lacunes en Compétences (IA)',
                'ordering': ['-analysis_date', 'employee__last_name'],
            },
        ),
        migrations.CreateModel(
            name='TrainingCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre de la Formation')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('provider', models.CharField(blank=True, max_length=100, null=True, verbose_name='Fournisseur (Interne/Externe)')),
                ('duration_hours', models.IntegerField(blank=True, null=True, verbose_name='Durée (Heures)')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Coût')),
                ('training_type', models.CharField(choices=[('En Ligne', 'En Ligne'), ('En Présentiel', 'En Présentiel'), ('Mixte (En ligne et Présentiel)', 'Mixte (En ligne et Présentiel)')], default='IN_PERSON', max_length=60, verbose_name='Type de Formation')),
                ('url_link', models.URLField(blank=True, null=True, verbose_name='Lien (si en ligne)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de Création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de Dernière Mise à Jour')),
                ('skills_covered', models.ManyToManyField(related_name='courses', to='skill_training.skill', verbose_name='Compétences Couvertes')),
            ],
            options={
                'verbose_name': 'Formation',
                'verbose_name_plural': 'Formations',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='RecommendedTraining',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de Recommandation')),
                ('reasoning', models.TextField(blank=True, null=True, verbose_name="Raisonnement de l'IA")),
                ('confidence_score', models.FloatField(blank=True, help_text="Score de confiance de l'IA pour cette recommandation (0-1, 1 étant le plus confiant).", null=True, verbose_name='Score de Confiance IA')),
                ('is_accepted', models.BooleanField(default=False, verbose_name="Accepté par l'Employé/Manager")),
                ('accepted_date', models.DateField(blank=True, null=True, verbose_name="Date d'Acceptation")),
                ('status', models.CharField(choices=[('En attente', 'En attente'), ('Acceptée', 'Acceptée'), ('Refusée', 'Refusée'), ('Inscrite', 'Inscrite'), ('Terminée', 'Terminée')], default='En attente', max_length=20, verbose_name='Statut de la Recommandation')),
                ('rejection_reason', models.TextField(blank=True, null=True, verbose_name='Motif de Refus')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended_trainings', to=settings.AUTH_USER_MODEL, verbose_name='Employé')),
                ('originating_gap_analysis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_recommendations', to='skill_training.skillgapanalysis', verbose_name="Issue de l'Analyse de Lacune")),
                ('training_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to='skill_training.trainingcourse', verbose_name='Formation Recommandée')),
            ],
            options={
                'verbose_name': 'Recommandation de Formation (IA)',
                'verbose_name_plural': 'Recommandations de Formations (IA)',
                'ordering': ['-recommendation_date', 'employee__last_name'],
                'unique_together': {('employee', 'training_course', 'recommendation_date')},
            },
        ),
        migrations.CreateModel(
            name='EmployeeSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_level', models.IntegerField(choices=[(1, 'Débutant (Notions de base)'), (2, 'Connaissance de base (Peut exécuter avec supervision)'), (3, 'Intermédiaire (Peut exécuter de manière autonome)'), (4, "Avancé (Peut exécuter et former d'autres)"), (5, 'Expert (Leader dans le domaine, innove)')], verbose_name='Niveau de Maîtrise')),
                ('last_assessed_date', models.DateField(auto_now=True, verbose_name='Date de Dernière Évaluation')),
                ('assessment_method', models.CharField(blank=True, choices=[('SELF', 'Auto-évaluation'), ('MANAGER', 'Évaluation Manager'), ('PEER', 'Évaluation Pair'), ('HR', 'Évaluation RH'), ('AI', 'Évaluation IA'), ('TEST', 'Test de Compétences')], max_length=50, null=True, verbose_name="Méthode d'Évaluation")),
                ('assessed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='skills_assessed', to=settings.AUTH_USER_MODEL, verbose_name='Évalué par')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee_skills', to=settings.AUTH_USER_MODEL, verbose_name='Employé')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee_mastery', to='skill_training.skill', verbose_name='Compétence')),
            ],
            options={
                'verbose_name': 'Compétence Employé',
                'verbose_name_plural': 'Compétences Employés',
                'ordering': ['employee__last_name', 'skill__name'],
                'unique_together': {('employee', 'skill')},
            },
        ),
        migrations.CreateModel(
            name='EmployeeTraining',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField(blank=True, null=True, verbose_name="Date d'Inscription")),
                ('completion_date', models.DateField(blank=True, null=True, verbose_name='Date de Complétion')),
                ('status', models.CharField(choices=[('Inscrit', 'Inscrit'), ('En Cours', 'En Cours'), ('Terminé', 'Terminé'), ('Annulé', 'Annulé')], default='ENROLLED', max_length=20, verbose_name='Statut')),
                ('score', models.IntegerField(blank=True, null=True, verbose_name='Score Obtenu (si applicable)')),
                ('feedback_on_course', models.TextField(blank=True, null=True, verbose_name='Feedback sur la Formation')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'Enregistrement")),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de Dernière Mise à Jour')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainings_taken', to=settings.AUTH_USER_MODEL, verbose_name='Employé')),
                ('recommended_by_ai', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_employee_training', to='skill_training.recommendedtraining', verbose_name="Recommandée par l'IA")),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='skill_training.trainingcourse', verbose_name='Formation')),
            ],
            options={
                'verbose_name': 'Participation Formation',
                'verbose_name_plural': 'Participations Formations',
                'ordering': ['-enrollment_date', 'employee__last_name'],
                'unique_together': {('employee', 'course', 'enrollment_date')},
            },
        ),
    ]
